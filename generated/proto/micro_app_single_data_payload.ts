// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "micro_app_single_data_payload.proto" (syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { MicroAppCommunicationChannel } from "./element";
/**
 * @generated from protobuf message MicroAppSinigleDataPayload
 */
export interface MicroAppSinigleDataPayload {
    /**
     * @generated from protobuf field: MicroAppCommunicationChannel channel = 1;
     */
    channel: MicroAppCommunicationChannel;
    /**
     * @generated from protobuf field: map<string, string> payload = 2;
     */
    payload: {
        [key: string]: string;
    };
    /**
     * @generated from protobuf field: optional string appName = 3;
     */
    appName?: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class MicroAppSinigleDataPayload$Type extends MessageType<MicroAppSinigleDataPayload> {
    constructor() {
        super("MicroAppSinigleDataPayload", [
            { no: 1, name: "channel", kind: "enum", T: () => ["MicroAppCommunicationChannel", MicroAppCommunicationChannel] },
            { no: 2, name: "payload", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 9 /*ScalarType.STRING*/ } },
            { no: 3, name: "appName", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<MicroAppSinigleDataPayload>): MicroAppSinigleDataPayload {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.channel = 0;
        message.payload = {};
        if (value !== undefined)
            reflectionMergePartial<MicroAppSinigleDataPayload>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MicroAppSinigleDataPayload): MicroAppSinigleDataPayload {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* MicroAppCommunicationChannel channel */ 1:
                    message.channel = reader.int32();
                    break;
                case /* map<string, string> payload */ 2:
                    this.binaryReadMap2(message.payload, reader, options);
                    break;
                case /* optional string appName */ 3:
                    message.appName = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap2(map: MicroAppSinigleDataPayload["payload"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof MicroAppSinigleDataPayload["payload"] | undefined, val: MicroAppSinigleDataPayload["payload"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.string();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field MicroAppSinigleDataPayload.payload");
            }
        }
        map[key ?? ""] = val ?? "";
    }
    internalBinaryWrite(message: MicroAppSinigleDataPayload, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* MicroAppCommunicationChannel channel = 1; */
        if (message.channel !== 0)
            writer.tag(1, WireType.Varint).int32(message.channel);
        /* map<string, string> payload = 2; */
        for (let k of globalThis.Object.keys(message.payload))
            writer.tag(2, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.LengthDelimited).string(message.payload[k]).join();
        /* optional string appName = 3; */
        if (message.appName !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.appName);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MicroAppSinigleDataPayload
 */
export const MicroAppSinigleDataPayload = new MicroAppSinigleDataPayload$Type();
